#########################################################
###################### Properties ######################
#########################################################
spring.application.name => Name own project
spring.profiles.active => Active profile properties, doesn't matter name, but it's so important this name will be same that own file properties, "dev" = "application-dev.properties"
spring.datasource.url => data base properties, type, url, name ...
spring.datasource.username => data base username
spring.datasource.password => password username
spring.jpa.properties.hibernate.dialect => Specific to hibernate schema data base for hibernate will be more effective with sintaxis structures

#########################################################
##################### Dependencies ######################
#########################################################
What consist injection dependencies? it's about inject an object instance without to do it in each class, that means, we can take an instance and inject it in any class
Wha is inversion control (IOC)? it's dependencies injection, control about how to we inject dependencies in the objects
We can inject dependencies of several forms like @Resource, @Autowired and @Qualifier

#########################################################
#################### JPA Annotations ####################
#########################################################
@Entity: it's a java class that represents a table of a database
@Table: Allow to receive database table name
@Column: Allow to configure a specific name of an attribute own object
@id: Indicate that attribute contains a primary key
@EmbededID: Indicate that attribute contains a composed primary key
@GenerateValue: Allow assign a default value in an attribute own object
@OneToMany: Allow configured a relation between one object to many objects
@ManyToOne: Allow configured a relation between many objects to one object
@Query: Allow to create a native query like to do it in a SQL Manager or another one
@Repository: To indicate spring about a class type repository, that means this class will interactive with our database
@Component: To indicate spring about this a general component, without specific a component

#########################################################
################ Spring Data Repositories ###############
#########################################################
CRUD Repository: Allows to do create, read, update and delete information in our database
Paging and Sorting Repository: same CRUD, but besides allow to do paging and sorting information we get in our database
JPA Repository: same CRUD and Paging, but besides allow to use specific features of JPA

